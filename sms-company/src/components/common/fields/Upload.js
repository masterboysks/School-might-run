import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
export const upload = ({ label, name, errors = {}, register, required = false, showError = true, uploadText, errorText = "", id = Math.random() + "jkhsaieor", watch, accept, }) => {
    let logo;
    watch && (logo = watch(name));
    return (_jsx(_Fragment, { children: _jsxs("div", { className: "", children: [_jsx("label", { htmlFor: id, className: `${errors && errors[name] && "text-red-600 "} block text-sm ease`, children: label }), _jsx("div", { className: "mt-[6px] sm:mt-0 sm:col-span-2", children: _jsxs("div", { className: "text-primary-gray-700 flex items-center", children: [_jsx("span", { className: " w-12 h-12 overflow-hidden rounded-full", children: _jsx("svg", { className: "w-full h-full text-gray-300", fill: "currentColor", viewBox: "0 0 24 24", children: _jsx("path", { d: "M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z" }) }) }), _jsxs("label", { htmlFor: id, className: "bg-primary-grey-200 cursor-pointer border-primary-field border-[1px] rounded ml-2 p-1 text-primary-grey-700 focus-within:border-primary-btn", children: [_jsx("input", { type: "file", name: name, id: id, className: "sr-only", ...register(name, { required }), accept: accept }), logo && logo.length === 1
                                        ? logo[0].name
                                        : uploadText || "Choose a file to upload"] })] }) }), showError && errors && errors[name] && (_jsxs(_Fragment, { children: [_jsx("span", { className: "text-xs font-light text-red-600", children: errorText || " This is a required field." }), _jsx("br", {})] }))] }) }));
};
export const uploadPhoto = ({ label, name, errors = {}, register, required = false, showError = true, uploadText = "", errorText = "", id = Math.random() + "hdfhdfkhfkdh", watch, }) => {
    let logo;
    watch && (logo = watch(name));
    return (_jsx(_Fragment, { children: _jsxs("div", { className: "", children: [_jsx("label", { htmlFor: id, className: `${errors && errors[name] && "text-red-600 "} block text-sm`, children: label }), _jsx("div", { className: "mt-[6px] sm:mt-0 sm:col-span-2", children: _jsxs("div", { className: "text-primary-gray-700 flex items-center", children: [_jsx("span", { className: " w-12 h-12 overflow-hidden rounded-full", children: _jsx("svg", { className: "w-full h-full text-gray-300", fill: "currentColor", viewBox: "0 0 24 24", children: _jsx("path", { d: "M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z" }) }) }), _jsxs("label", { htmlFor: id, className: "bg-primary-grey-200 cursor-pointer border-primary-field border-[1px] rounded ml-2 p-1 text-primary-grey-700 focus-within:border-primary-btn", children: [" ", _jsx("input", { type: "file", name: name, id: id, className: "sr-only", ...register(name, { required }), accept: "image/*" }), logo && logo.length === 1
                                        ? logo[0].name
                                        : uploadText || "Choose a file to upload"] })] }) }), showError && errors && errors[name] && (_jsxs(_Fragment, { children: [_jsx("span", { className: "text-xs font-light text-red-600", children: errorText || " This is a required field." }), _jsx("br", {})] }))] }) }));
};
